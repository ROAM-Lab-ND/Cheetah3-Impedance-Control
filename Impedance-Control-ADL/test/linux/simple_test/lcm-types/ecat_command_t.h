// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by lcm-gen

#ifndef _ecat_command_t_h
#define _ecat_command_t_h

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct _ecat_command_t ecat_command_t;
struct _ecat_command_t
{
    float      x_des[4];
    float      y_des[4];
    float      z_des[4];
    float      dx_des[4];
    float      dy_des[4];
    float      dz_des[4];
    float      kpx[4];
    float      kpy[4];
    float      kpz[4];
    float      kdx[4];
    float      kdy[4];
    float      kdz[4];
    int32_t    enable[4];
    int32_t    zero_joints[4];
    float      fx_ff[4];
    float      fy_ff[4];
    float      fz_ff[4];
    float      tau_abad_ff[4];
    float      tau_hip_ff[4];
    float      tau_knee_ff[4];
    float      abad_zero_angle[4];
    float      hip_zero_angle[4];
    float      knee_zero_angle[4];
    float      q_des_abad[4];
    float      q_des_hip[4];
    float      q_des_knee[4];
    float      qd_des_abad[4];
    float      qd_des_hip[4];
    float      qd_des_knee[4];
    float      kp_joint_abad[4];
    float      kp_joint_hip[4];
    float      kp_joint_knee[4];
    float      kd_joint_abad[4];
    float      kd_joint_hip[4];
    float      kd_joint_knee[4];
    float      max_torque[4];
};

/**
 * Create a deep copy of a ecat_command_t.
 * When no longer needed, destroy it with ecat_command_t_destroy()
 */
ecat_command_t* ecat_command_t_copy(const ecat_command_t* to_copy);

/**
 * Destroy an instance of ecat_command_t created by ecat_command_t_copy()
 */
void ecat_command_t_destroy(ecat_command_t* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ecat_command_t_subscription_t ecat_command_t_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ecat_command_t is received.
 */
typedef void(*ecat_command_t_handler_t)(
    const lcm_recv_buf_t *rbuf, const char *channel,
    const ecat_command_t *msg, void *userdata);

/**
 * Publish a message of type ecat_command_t using LCM.
 *
 * @param lcm The LCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means LCM has transferred
 * responsibility of the message data to the OS.
 */
int ecat_command_t_publish(lcm_t *lcm, const char *channel, const ecat_command_t *msg);

/**
 * Subscribe to messages of type ecat_command_t using LCM.
 *
 * @param lcm The LCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by LCM when a message is
 *     received. This function is invoked by LCM during calls to lcm_handle()
 *     and lcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return 0 on success, <0 if an error occured
 */
ecat_command_t_subscription_t* ecat_command_t_subscribe(
    lcm_t *lcm, const char *channel, ecat_command_t_handler_t handler, void *userdata);

/**
 * Removes and destroys a subscription created by ecat_command_t_subscribe()
 */
int ecat_command_t_unsubscribe(lcm_t *lcm, ecat_command_t_subscription_t* hid);

/**
 * Sets the queue capacity for a subscription.
 * Some LCM providers (e.g., the default multicast provider) are implemented
 * using a background receive thread that constantly revceives messages from
 * the network.  As these messages are received, they are buffered on
 * per-subscription queues until dispatched by lcm_handle().  This function
 * how many messages are queued before dropping messages.
 *
 * @param subs the subscription to modify.
 * @param num_messages The maximum number of messages to queue
 *  on the subscription.
 * @return 0 on success, <0 if an error occured
 */
int ecat_command_t_subscription_set_queue_capacity(
    ecat_command_t_subscription_t* subs, int num_messages);

/**
 * Encode a message of type ecat_command_t into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ecat_command_t_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ecat_command_t_encode(void *buf, int offset, int maxlen, const ecat_command_t *p);

/**
 * Decode a message of type ecat_command_t from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ecat_command_t_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ecat_command_t_decode(const void *buf, int offset, int maxlen, ecat_command_t *msg);

/**
 * Release resources allocated by ecat_command_t_decode()
 * @return 0
 */
int ecat_command_t_decode_cleanup(ecat_command_t *p);

/**
 * Check how many bytes are required to encode a message of type ecat_command_t
 */
int ecat_command_t_encoded_size(const ecat_command_t *p);

// LCM support functions. Users should not call these
int64_t __ecat_command_t_get_hash(void);
uint64_t __ecat_command_t_hash_recursive(const __lcm_hash_ptr *p);
int __ecat_command_t_encode_array(
    void *buf, int offset, int maxlen, const ecat_command_t *p, int elements);
int __ecat_command_t_decode_array(
    const void *buf, int offset, int maxlen, ecat_command_t *p, int elements);
int __ecat_command_t_decode_array_cleanup(ecat_command_t *p, int elements);
int __ecat_command_t_encoded_array_size(const ecat_command_t *p, int elements);
int __ecat_command_t_clone_array(const ecat_command_t *p, ecat_command_t *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
